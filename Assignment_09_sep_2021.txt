/* Create an interface with functionality of calculating simple interest,compound interest on
 *  principal amount based on given interest rates.
 *  Provide implementation of these functionality in a class */



package NinesepAssignment.Calculator;

public interface Calculator {

	public  void simpleIntrest(double p,double r,double t);
	public  void compoundIntrest(double p, double r,double t);	   
}

package NinesepAssignment.Calculator;

import java.util.Scanner;
public class Amount implements Calculator{
	 public void simpleIntrest(double p, double r,double t)
     {
    	 System.out.println(" the Simple Intrest is :"+(p*r*t)/100);
     }
	 public void compoundIntrest(double p, double r,double t) {
		 double amount;
		  amount=p*(Math.pow((1+r/100),t));
		System.out.println("Compount intrest is:"+ (amount-p));
		 
	 }

	public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    
     double pri_amount,rate,time,simpleintrest,compountintrest;
     
      
     System.out.println("Enter the Principal Amount:");
      pri_amount=sc.nextDouble();
      
      System.out.println("Enter the Rate:");
      rate=sc.nextDouble();
      
      System.out.println("Enter the time:"); 
      time=sc.nextDouble();
       
      Amount a=new Amount();
      a.simpleIntrest(pri_amount,rate,time);
       a.compoundIntrest(pri_amount,rate,time);
	}

}



<..................................................................................>


Identify  appropriate Entities,Sub Entities,abstract classes and interfaces in Order Management System.
  
<<<<<<<<<<<<<<<<<<<<<Entities>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
...............................................   
   Product

  <<<<<attributes>>>

  product_id
  product_customer_id
  product_name
  product_number
  product_type
  product_description

...............................................

   Order

  <<<<<attributes>>>
   
  order_id
  ordert_customer_id
  order_number
  order_type
  order_description

..........................................

   Confirm Order

   <<<<<attributes>>>

  confirm_order_id
  confirm_ordert_customer_id
  confirm_order_number
  confirm_order_type
  confirm_order_description

............................................

    Update
   
   <<<<<attributes>>>

     
  update_id
  update_number
  update_type
  update_description

.....................................................

    Customer

  <<<<<attributes>>>
   
    customer_id
    customer_name
    customer_mobile
    customer_email
    customer_username
    customer_password
    customer_address

............................................................

     Product Quality


  <<<<<attributes>>>

     quality_id
     product_quality_id
     quality_category
     quality_type
     quality_description

..............................................

    <<<<<classes and interface>>>
   
    Product
    Order
    conform Order
    Update 
    Customer
    Product Quality

........................................................

<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 /*4. Create a class Person and implement Serializable ,

 *    personId
 *    personName
 *    personAge
 *    personLocation
 *     ....
 *     get()... set()

 *     Using Reflection API

 *  1.List all the constructors in Person class.
 *  2.Write a code to dynamically create an object of Person class using class data.
 *  3. Identify if Person class is implementing Serializable interface
 *  4. Identify if Person class has getter() and setter() methods.

*/

package NinesepAssignment.Calculator;

import java.io.Serializable;

public class Person implements Serializable {
	 private int personId;
	 private String  personName;
	 private int personAge;
	 private String   personLocation;
	 
	 public Person(int personId, String personName,int personAge,String PersonLocation) {
		this.personId=personId;
		this.personName= personName;
		this.personAge=personAge;
		this.personLocation=personLocation;
		
	 }

	public int getPersonId()
	{
		return personId;
	}
	
	public void setPersonId(int personId)
	{
		this.personId=personId;
	}
	 
	public String getPersonName()
	{
		return personName;
	}
	
	public void setPersonName(String personName)
	{
		this.personName=personName;
	}
	public int getPersonAge()
	{
		return personAge;
	}
	public void setPersonAge( int personAge)
	{
		this.personAge=personAge;
	}
	public String PersonLocation()
	{
		return personLocation;
	}
	public void setPersonLocation(String personLocation)
	{
		this.personLocation=personLocation;
	}
}



..............

package NinesepAssignment.Calculator;

public  class Student extends Person {
	String course;
	int fees;
	public Student(int personId, String personName, int personAge, String PersonLocation, String course, int fees) {
		super(personId, personName, personAge, PersonLocation);
		this.course = course;
		this.fees = fees;
	}
	
	}
	


.........

package NinesepAssignment.Calculator;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

public class Serializable {
	 
 public static void main(String args[]) throws IOException, ClassNotFoundException
 {
	 Student s1=new Student(211,"Pradeep",23,"indore","java",2000);
	 FileOutputStream fout=new FileOutputStream("f.txt");    
	  ObjectOutputStream out=new ObjectOutputStream(fout);    
	  out.writeObject(s1);    
	  out.flush();    
	  //closing the stream    
	  out.close();    
	  System.out.println("success");  
	 
	  
	  ObjectInputStream in=new ObjectInputStream(new FileInputStream("f.txt"));    
	  Student s=(Student)in.readObject();    
	  //printing the data of the serialized object    
	  System.out.println(s.getPersonId()+" "+s.getPersonName()+ " "+ s.PersonLocation() +" "+ s.getPersonAge()+ " "+ s.course +" " +s.fees);    
	  //closing the stream    
	  in.close();    
 }
}

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
    

